import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Scanner;

public class SATSolver {

	public ArrayList<int[]> clauses = new ArrayList<int[]>();
	public ArrayList<int[]> queryClauses = new ArrayList<int[]>();
	
	public static final int FALSE = -1;
	public static final int UNKNOWN = 0;
	public static final int TRUE = 1;

	
	public void addClause(int[] clause) {
		clauses.add((int[]) clause.clone());
	}
	public void clearClauses() {
		clauses.clear();
	}
	public void addQueryClause(int[] clause) {
		queryClauses.add((int []) clause.clone());
	}
	public void clearQueryClauses() {
		queryClauses.clear();
	}

	public boolean makeQuery()
	{
		try {
			int maxVar = 0;
			ArrayList<int[]> allClauses = new ArrayList<int[]>(clauses);
			allClauses.addAll(queryClauses);
			for (int[] clause: allClauses)
				for (int literal: clause)
					maxVar = Math.max(Math.abs(literal), maxVar);
			PrintStream out = new PrintStream(new File("query.cnf"));
			out.println("c This DIMACS format CNF file was generated by SatSolver.java");
			out.println("c Do not edit.");
			out.println("p cnf " + maxVar + " " + allClauses.size());
			for (int[] clause: allClauses) {
				for (int literal: clause)
					out.print(literal + " ");
					out.println("0");
			}
			out.close();

			Process process = Runtime.getRuntime().exec("zchaff query.cnf");
			Scanner sc = new Scanner(process.getInputStream());
			sc.findWithinHorizon("RESULT:", 0);
			String result = sc.next();
			sc.close();
			process.waitFor();
			return result.equals("SAT");

		}
		catch (Exception e) {
			System.out.println(e);
		}
		return false;
	}
	
	public int testLiteral(int literal) {
		int result = UNKNOWN;
		clearQueryClauses();
		int[] clauseT = {literal};
		addQueryClause(clauseT);
		if (!makeQuery())
			result = FALSE;
		else {
			clearQueryClauses();
			int[] clauseF = {-literal};
			addQueryClause(clauseF);
		if (!makeQuery())
			result = TRUE;
		}
		clearQueryClauses();
		return result;
		}

	public static void main(String[] args)
	{
		// Liar and truth-teller example test code:
		int[][] clauses = {{-1, -2}, {2, 1}, {-2, -3}, {3, 2}, {-3, -1}, {-3, -2}, {1, 2, 3}};
		SATSolver s = new SATSolver();
		for (int i = 0; i < clauses.length; i++)
			s.addClause(clauses[i]);
		System.out.println("Knowledge base is satisfiable: " + s.makeQuery());
		System.out.print("Is Cal a truth-teller? ");
		int result = s.testLiteral(3);
		if (result == FALSE)
			System.out.println("No.");
		else if (result == TRUE)
			System.out.println("Yes.");
		else
			System.out.println("Unknown.");
	}


	
}
